defmodule Day17 do

  import Intcode, only: [runner: 3, read_program: 1]

  "
..............#####............................
..............#...#............................
..............#...#............................
..............#...#............................
..............#...#............................
..............#...#............................
..............#...#.....#############..........
..............#...#.....#...........#..........
..............#.#####...#.#############........
..............#.#.#.#...#.#.........#.#........
..............#.#.#############.....#.#........
..............#.#...#...#.#...#.....#.#........
..............#######...#.#.###########........
................#.......#.#.#.#.....#..........
........#########.......#.#####.....#####......
........#...............#...#...........#......
........#...............#...#...........#......
........#...............#...#...........#......
#########.....###########...#...........#......
#.............#.............#...........#......
#.............#.........#######.........#......
#.............#.........#...#.#.........#......
#.............#############.#.#.........######^
#.......................#.#.#.#................
#.......................#####.#................
#.........................#...#................
#.........................#...#................
#.........................#...#................
#.........................#...#................
#.........................#...#................
#######...................#...#................
......#...................#...#................
......#...................#####................
......#........................................
......#........................................
......#........................................
......#........................................
......#........................................
......#####....................................
..........#....................................
..........#....................................
..........#....................................
..........#....................................
..........#....................................
..........#....................................
..........#....................................
..........#############........................
  "

  def get_progr do
    read_program("day17.txt")

  end

  def get_map do
    {map, progr} = runner(get_progr, 0, input: [])
    map
  end

  def print_map do
    IO.puts(get_map)
  end

  def map_to_map do
    get_map |> List.to_string() |> String.split("\n") |> Enum.map( &String.graphemes/1) |> Enum.filter(&(Enum.count(&1)>0))
    |> Enum.with_index |> Enum.reduce(%{}, fn {v, y}, accy ->
      v |> Enum.with_index() |> Enum.reduce(accy, fn {v, x}, accx ->
        Map.put(accx, {x, y}, v)
      end)
    end)
  end

  def is_intersection({x,y}, map) do
    p1 = {x-1, y}
    p2 = {x+1, y}
    p3 = {x, y-1}
    p4 = {x, y+1}

    Map.get(map, p1) == "#" && Map.get(map, p2) == "#" && Map.get(map, p3) == "#" && Map.get(map, p4) == "#"
  end

  def get_intersections(map) do
    map_to_map |> Enum.filter( fn {{x,y}, w} ->
      if w == "#", do: is_intersection({x,y}, map)
    end)
  end

  def part1 do
    get_intersections(map_to_map) |> Enum.map(fn {{x, y}, "#"} ->
      x*y
    end) |> Enum.sum
  end

  def part2_prepare(p) do
    Map.put(p, 0, 2)
  end

  def part2() do
    progr = part2_prepare(get_progr)
    {:block, progr, pc, options} = runner(progr, 0, input: [])

    Keyword.get(options, :output) |> Enum.reverse |> IO.puts
    main = "A,B,B,C,B,C,B,C,A,A\n" |> String.to_charlist
    {:block, progr, pc, options} = runner(progr, pc, Keyword.put(options, :input, main))
    Keyword.get(options, :output) |> Enum.reverse |> IO.puts
    funa = "L,6,R,8,L,4,R,8,L,12\n" |> String.to_charlist
    {:block, progr, pc, options} = runner(progr, pc, Keyword.put(options, :input, funa ))
    Keyword.get(options, :output) |> Enum.reverse |> IO.puts
    funb = "L,12,R,10,L,4\n" |> String.to_charlist
    {:block, progr, pc, options} = runner(progr, pc, Keyword.put(options, :input, funb ))
    Keyword.get(options, :output) |> Enum.reverse |> IO.puts
    func = "L,12,L,6,L,4,L,4\n" |> String.to_charlist
    {:block, progr, pc, options} = runner(progr, pc, Keyword.put(options, :input, func ))
    Keyword.get(options, :output) |> Enum.reverse |> IO.puts
    yn = "y\n" |> String.to_charlist
    {output, progr} = runner(progr, pc, Keyword.put(options, :input, yn ))
    [h|t] = Enum.reverse(output)
    h


    #{:block, progr, pc, options} = runner(progr, pc, input: "L,1,R,2\n" |> String.to_charlist)
    #{:block, progr, pc, options} = runner(progr, pc, input: "L,L,R\n" |> String.to_charlist)
    #{:block, progr, pc, options} = runner(progr, pc, input: "L,L,R\n" |> String.to_charlist)
    # {:block, progr, pc, options} = runner(progr, pc, input: "y\n" |> String.to_charlist)
    # L,6,R,8,L,4,R,8,L,12,L,12,R,10,L,4,L,12,R,10,L,4,L,12,L,6,L,4
  end

end
